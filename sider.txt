ナップサック問題を全探索により解くプログラムの解説をお願いしたいです。
ここでのナップサック問題とは、容量の決まったナップサックと、重さと価値が決まった品物のリストが与えられたときに、
ナップサックの限界の重さの制約のもとで品物の価値の合計を最大化する問題です。
プログラムの構造は以下と通りです。
knapsack/
    include/
        item.h search.h util.h
    src/
        item.c main.c search.c util.c

Cファイルの内容を以下に示します。
item.c 
#include <stdio.h>
#include <stdlib.h>

#include "item.h"

// 以下は構造体定義

// 構造体 Item
// 価値valueと重さweightが格納されている
struct item {
    double value;
    double weight;
};

// 構造体 Item
// 価値valueと重さweightが格納されている
// Itemポインタをmallocする必要あり
struct itemset {
    size_t number;
    Item *item;
};

// 構造体をポインタで確保するお作法を確認してみよう
Itemset *init_itemset(size_t number, int seed) {
    Itemset *list = (Itemset *)malloc(sizeof(Itemset));

    Item *item = (Item *)malloc(sizeof(Item) * number);

    srand(seed);
    for (int i = 0; i < number; i++) {
        item[i].value = 0.25 * (rand() % 200);
        item[i].weight = 0.25 * (rand() % 200 + 1);
    }
    *list = (Itemset){.number = number, .item = item};
    return list;
}

// itemset の free関数
void free_itemset(Itemset *list) {
    free(list->item);
    free(list);
}

// 表示関数
void print_itemset(const Itemset *list) {
    size_t n = list->number;
    const char *format = "v[%d] = %4.1f, w[%d] = %4.1f\n";
    for (int i = 0; i < n; i++) {
        Item *item = get_item(list, i);
        printf(format, i, get_itemvalue(item), i, get_itemweight(item));
    }
    printf("----\n");
}

Item *get_item(const Itemset *list, size_t index) {
    return &(list->item[index]);
}

size_t get_nitem(const Itemset *list) { return list->number; }

double get_itemweight(const Item *item) { return item->weight; }

double get_itemvalue(const Item *item) { return item->value; }

main.c 
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include "item.h"
#include "search.h"
#include "util.h"

// main関数
// プログラム使用例: ./knapsack 10 20
//  10個の品物を設定し、キャパ20 でナップサック問題をとく

int main(int argc, char **argv) {
    /* 引数処理: ユーザ入力が正しくない場合は使い方を標準エラーに表示して終了 */
    if (argc != 3) {
        fprintf(stderr, "usage: %s <the number of items (int)> <max capacity (double)>\n", argv[0]);
        exit(1);
    }

    // 個数の上限はあらかじめ定めておく
    const int max_items = 100;

    const int n = load_int(argv[1]);
    assert(n <= max_items);  // assert で止める
    assert(n > 0);           // 0以下も抑止する

    const double W = load_double(argv[2]);
    assert(W >= 0.0);

    printf("max capacity: W = %.f, # of items: %d\n", W, n);

    // 乱数シードを1にして、初期化 (ここは変更可能)
    int seed = 1;
    Itemset *items = init_itemset(n, seed);
    print_itemset(items);

    // ソルバーで解く
    double total = solve(items, W);

    // 表示する
    printf("----\nbest solution:\n");
    printf("value: %4.1f\n", total);

    free_itemset(items);
    return 0;
}

search.c 
#include "search.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "item.h"

// ソルバーは search を index = 0 で呼び出すだけ
double solve(const Itemset *list, double capacity) {
    size_t nitem = get_nitem(list);

    // 品物を入れたかどうかを記録するフラグ配列 =>
    // !!最大の組み合わせが返ってくる訳ではない!!
    unsigned char flags[nitem];
    return search(0, list, capacity, flags, 0.0, 0.0);
}

// 再帰的な探索関数
double search(int index, const Itemset *list, double capacity, unsigned char *flags, double sum_v, double sum_w) {
    size_t max_index = get_nitem(list);
    assert(index >= 0 && sum_v >= 0 && sum_w >= 0);

    // 必ず再帰の停止条件を明記する (最初が望ましい)
    if (index == max_index) {
        const char *format_ok = ", total_value = %5.1f, total_weight = %5.1f\n";
        const char *format_ng = ", total_value = %5.1f, total_weight = %5.1f NG\n";

        bool is_not_exceed = (sum_w <= capacity); // 重さ評価のtrue/false
        for (int i = 0; i < max_index; i++) {
            printf("%d", flags[i]);
        }
        printf((is_not_exceed) ? format_ok : format_ng, sum_v, sum_w);
        return (is_not_exceed) ? sum_v : 0;
    }

    // 以下は再帰の更新式: 現在のindex の品物を使う or 使わないで分岐し、index
    // をインクリメントして再帰的にsearch() を実行する

    // index番目を使わない場合
    flags[index] = 0;
    const double v0 = search(index + 1, list, capacity, flags, sum_v, sum_w);

    // index番目を使う場合
    flags[index] = 1;
    Item *item = get_item(list, index);
    sum_v += get_itemvalue(item);
    sum_w += get_itemweight(item);
    const double v1 = search(index + 1, list, capacity, flags, sum_v, sum_w);

    // 使った場合の結果と使わなかった場合の結果を比較して返す
    return (v0 > v1) ? v0 : v1;
}

util.c 
#include "util.h"

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int load_int(const char *argvalue) {
    long nl;
    char *e;
    errno = 0;  // errno.h で定義されているグローバル変数を一旦初期化
    nl = strtol(argvalue, &e, 10);
    if (errno == ERANGE) {
        fprintf(stderr, "%s: %s\n", argvalue, strerror(errno));
        exit(1);
    }
    if (*e != '\0') {
        fprintf(stderr, "%s: an irregular character '%c' is detected.\n",
                argvalue, *e);
        exit(1);
    }
    return (int)nl;
}

double load_double(const char *argvalue) {
    double ret;
    char *e;
    errno = 0;  // errno.h で定義されているグローバル変数を一旦初期化
    ret = strtod(argvalue, &e);
    if (errno == ERANGE) {
        fprintf(stderr, "%s: %s\n", argvalue, strerror(errno));
        exit(1);
    }
    if (*e != '\0') {
        fprintf(stderr, "%s: an irregular character '%c' is detected.\n",
                argvalue, *e);
        exit(1);
    }
    return ret;
}

質問の具体的な内容は以下の通りです。
search.c内のsearch関数における関数の再帰呼び出しについて詳しく説明してください。

なお、不明な点があれば、聞いてください。